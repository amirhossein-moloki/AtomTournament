version: "3.8"

networks:
  main_network:
    driver: bridge

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - main_network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - main_network

  web:
    build: .
    entrypoint: /app/entrypoint.sh
    command: web gunicorn tournament_project.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - 8000
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - main_network

  daphne:
    build: .
    entrypoint: /app/entrypoint.sh
    command: daphne daphne -b 0.0.0.0 -p 8001 tournament_project.asgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - 8001
    env_file:
      - .env
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD-SHELL", "exec 6<>/dev/tcp/127.0.0.1/8001; echo -e 'GET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n' >&6; grep -q 'HTTP/1.1 200 OK' <&6"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - main_network

  celery_worker:
    build: .
    entrypoint: /app/entrypoint.sh
    command: worker celery -A tournament_project worker -l info
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - main_network

  celery_beat:
    build: .
    entrypoint: /app/entrypoint.sh
    command: beat celery -A tournament_project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - main_network

  nginx:
    image: nginx:1.25
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/self-signed.crt:/etc/nginx/self-signed.crt
      - ./nginx/self-signed.key:/etc/nginx/self-signed.key
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      web:
        condition: service_started
      daphne:
        condition: service_healthy
    networks:
      - main_network

volumes:
  postgres_data:
  static_volume:
  media_volume:
